package com.bacunguyenandroid.cdcswitchclient;import android.app.ActivityManager;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.net.Uri;import android.provider.Settings;import android.support.annotation.Nullable;import android.support.design.widget.TabLayout;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.view.LayoutInflater;import android.view.View;import com.bacunguyenandroid.cdcswitchclient.Adapter.ViewPagerAdapter;import com.bacunguyenandroid.cdcswitchclient.Net.Socketworker;import com.bacunguyenandroid.cdcswitchclient.Net.SocketworkerListener;import com.bacunguyenandroid.cdcswitchclient.Net.Talkcontent;import com.bacunguyenandroid.cdcswitchclient.Tool.ZoomOutPageTransformer;public class MainActivity extends AppCompatActivity  implements SocketworkerListener,TabLayout.OnTabSelectedListener {    // TODO:Valueable    private Toolbar toolbar;    private TabLayout tabLayout;    private ViewPagerNoSwipe viewPager;    private ViewPagerAdapter viewPagerAdapter;    public  Socketworker socketworker;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        //init element        initchildelement();        //init set up        initSetup();    }    // TODO: This is init child element    private void initchildelement() {        toolbar = (Toolbar) findViewById(R.id.toolbar);        viewPager = (ViewPagerNoSwipe) findViewById(R.id.viewPager);        tabLayout = (TabLayout) findViewById(R.id.tabs);    }    // TODO:This is  init Setup    private void initSetup() {        setSupportActionBar(toolbar);        toolbar.setTitleTextColor(Color.WHITE);        viewPagerAdapter = new ViewPagerAdapter(getSupportFragmentManager());        viewPager.setAdapter(viewPagerAdapter);        viewPager.setPageTransformer(true, new ZoomOutPageTransformer());        viewPager.setDurationScroll(ViewPagerNoSwipe.DEFAULT_SCROLL_DURATION);        //dong bo tablayout voi viewpager        tabLayout.setupWithViewPager(viewPager);        tabLayout.addOnTabSelectedListener(this);        //Request permsion        DialogPermission();    }    // TODP: this is init Network    private  void initNet(){        // check ket toi server        socketworker = new Socketworker();        socketworker.AddConnectListener(this);        socketworker.ConnectToPc();    }    // TODO:Method    public void Backtopageconnect() {        viewPager.postDelayed(new Runnable()        {            @Override            public void run()            {                viewPager.setCurrentItem(0, true);            }        }, 100);    }    public void Movetopagechoose(){        viewPager.postDelayed(new Runnable()        {            @Override            public void run()            {                viewPager.setCurrentItem(1, true);            }        }, 100);    }    // TODO:Listener    @Override    public void OnTalkStart() {        Movetopagechoose();    }    @Override    public void OnTalkStop() {        if (isServiceRunning(GameService.class)) {            System.exit(0);        }        Backtopageconnect();        // TODO: connect PC agian        //stop connect rồi kết tạo lại server        socketworker.StopConnectPc();        socketworker.ConnectToPc();    }    @Override    public void OnDataTake(Talkcontent talkcontent) {    }    @Override    public void onTabSelected(TabLayout.Tab tab) {        if(tab.getPosition() == 0){            toolbar.setBackgroundColor(ContextCompat.getColor(MainActivity.this,                    R.color.tabconnect));            tabLayout.setBackgroundColor(ContextCompat.getColor(MainActivity.this,                    R.color.tabconnect));            getWindow().setStatusBarColor(getResources().getColor(R.color.tabconnect));        }        if(tab.getPosition() == 1){            toolbar.setBackgroundColor(ContextCompat.getColor(MainActivity.this,                    R.color.tabchoose));            tabLayout.setBackgroundColor(ContextCompat.getColor(MainActivity.this,                    R.color.tabchoose));            getWindow().setStatusBarColor(getResources().getColor(R.color.tabchoose));        }    }    @Override    public void onTabUnselected(TabLayout.Tab tab) {    }    @Override    public void onTabReselected(TabLayout.Tab tab) {    }    // TODO : Permision request    private  final  int Requestpermisoncode = 2222;    private  void RequestPermision() {        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + this.getPackageName()));        startActivityForResult(intent,Requestpermisoncode);    }    private boolean CanOver(){        return Settings.canDrawOverlays(this);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        if (requestCode == Requestpermisoncode) {            if(CanOver()){                initNet();            }            else  {                System.exit(0);            }        }    }    private  void DialogPermission(){        if(!CanOver()) {            View view = LayoutInflater.from(this).inflate(R.layout.dialogpmsion,null);            AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(this);            dlgAlert.setTitle("Permission request");            dlgAlert.setMessage("You need to authorize this application");            dlgAlert.setPositiveButton("OK",                    new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int which) {                            RequestPermision();                        }                    });            dlgAlert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialogInterface, int i) {                    System.exit(0);                }            });            dlgAlert.setView(view);            dlgAlert.setCancelable(false);            dlgAlert.create().show();        }        else {            initNet();        }    }    // TODO : On resume    @Override    protected void onResume() {        super.onResume();        if (isServiceRunning(GameService.class)) {            finish();        }    }    private boolean isServiceRunning(Class<?> serviceClass) {        ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);        for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {            if (serviceClass.getName().equals(service.service.getClassName())) {                return true;            }        }        return false;    }}